package ${package}.${modulePackage}.controller;

import ${package}.dto.${modulePackage}.${modelName}DTO;
import ${package}.vo.${modulePackage}.${modelName}VO;
import ${package}.service.${modelName}Service;
import ${package}.${packageModel}.${modelName};
import ${package}.vo.${modulePackage}.Query${modelName}VO;

import cn.com.${modulePackage}.controller.BaseController;
import cn.com.exception.MyException;
import cn.com.response.ResultCode;
import cn.com.response.ResultMessageJson;
import cn.com.response.ResultPageJson;
import cn.com.response.ResultJson;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import com.github.dozermapper.core.Mapper;

import javax.annotation.Resource;

import java.util.List;
import cn.com.utils.Paging;

/**
 * ${modelRemark} 控制器
 * @author ${author}

 * @date  ${now?datetime}
 */
@Slf4j
@RestController
@Api(tags = "${modelRemark} ")
@RequestMapping("/api/${modulePackage}")
public class ${modelName}Controller  extends BaseController {

    <#if modelName??>
        <#assign  lower= modelName?uncap_first >
         <#assign service=lower+"Service" >
        </#if>
    @Resource
    private ${modelName}Service ${service};

    // dozer深度复制
    @Resource
    private Mapper dozerMapper;

    @GetMapping(value = "/${requestUrl}")
    @ApiOperation(value = "查询${modelRemark}信息", notes = "查询${modelRemark}信息 分页参数 ?page=1&limit=10")
    @Paging
    public  ResultPageJson<List<${modelName}DTO>> queryList(Query${modelName}VO query${modelName}Vo) {
        List<${modelName}DTO>  list =${service}.queryList(query${modelName}Vo);
        return ResultPageJson.ok(list);
    }
    @GetMapping(value = "/${requestUrl}/{id}")
    @ApiOperation(value = "根据id查询单个${modelRemark}信息", notes = "根据id查询单个${modelRemark}信息 ")
    public  ResultJson<${modelName}DTO> queryById(@PathVariable("id") Integer id) {
        List<${modelName}DTO>  list =${service}.queryList(new Query${modelName}VO().setId(id));
        if(list==null || list.isEmpty()){
             throw new MyException(ResultCode.NON_EXISTENT_RECORD);
        }
        return ResultJson.ok(list.get(0));
    }
    @PostMapping(value = "/${requestUrl}")
    @ApiOperation(value = "新增${modelRemark}信息", notes = "新增${modelRemark}信息  ")
    public ResultMessageJson save(@Validated @RequestBody ${modelName}VO ${modelName?uncap_first}VO) {
        ${modelName} ${modelName?uncap_first} = dozerMapper.map(${modelName?uncap_first}VO, ${modelName}.class);
        boolean operation =${service}.save(${modelName?uncap_first});
        if (!operation) {
          throw new MyException(ResultCode.OPERATION_FAILED);
        }
        return ResultMessageJson.ok("添加${modelRemark}成功");
    }

    @PutMapping(value = "/${requestUrl}/{id}")
    @ApiOperation(value = "修改${modelRemark}信息", notes = "修改${modelRemark}信息  ")
    public  ResultMessageJson update(@PathVariable("id") Integer id,@RequestBody ${modelName}VO ${modelName?uncap_first}VO) {
        ${modelName}  temp = ${service}.getById(id);
        if (temp == null) {
             throw new MyException(ResultCode.NON_EXISTENT_RECORD);
        }
        ${modelName} ${modelName?uncap_first} = dozerMapper.map(${modelName?uncap_first}VO, ${modelName}.class);
        ${modelName?uncap_first}.setId(id);
        boolean operation = ${service}.updateById(${modelName?uncap_first});
        if (!operation) {
             throw new MyException(ResultCode.OPERATION_FAILED);
        }
        return ResultMessageJson.ok("修改${modelRemark}成功");
    }

    @DeleteMapping(value = "/${requestUrl}/{id}")
    @ApiOperation(value = "删除${modelRemark}信息", notes = "删除${modelRemark}信息  ")
    public  ResultMessageJson deleted(@PathVariable("id") Integer id) {
        ${modelName} ${modelName?uncap_first} =  ${service}.getById(id);
        if (${modelName?uncap_first} == null) {
             throw new MyException(ResultCode.NON_EXISTENT_RECORD);
        }
        boolean operation = ${service}.removeById(id);
        if (!operation) {
             throw new MyException(ResultCode.OPERATION_FAILED);
        }
        return ResultMessageJson.ok("删除${modelRemark}成功");
    }
}



